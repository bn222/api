// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortService_CreatePort_FullMethodName = "/port.PortService/CreatePort"
	PortService_DeletePort_FullMethodName = "/port.PortService/DeletePort"
	PortService_ClearAll_FullMethodName   = "/port.PortService/ClearAll"
)

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortServiceClient interface {
	CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*PortResponse, error)
	DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*PortResponse, error)
	ClearAll(ctx context.Context, in *ClearAllRequest, opts ...grpc.CallOption) (*ClearAllResponse, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*PortResponse, error) {
	out := new(PortResponse)
	err := c.cc.Invoke(ctx, PortService_CreatePort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*PortResponse, error) {
	out := new(PortResponse)
	err := c.cc.Invoke(ctx, PortService_DeletePort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) ClearAll(ctx context.Context, in *ClearAllRequest, opts ...grpc.CallOption) (*ClearAllResponse, error) {
	out := new(ClearAllResponse)
	err := c.cc.Invoke(ctx, PortService_ClearAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServiceServer is the server API for PortService service.
// All implementations must embed UnimplementedPortServiceServer
// for forward compatibility
type PortServiceServer interface {
	CreatePort(context.Context, *CreatePortRequest) (*PortResponse, error)
	DeletePort(context.Context, *DeletePortRequest) (*PortResponse, error)
	ClearAll(context.Context, *ClearAllRequest) (*ClearAllResponse, error)
	mustEmbedUnimplementedPortServiceServer()
}

// UnimplementedPortServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortServiceServer struct {
}

func (UnimplementedPortServiceServer) CreatePort(context.Context, *CreatePortRequest) (*PortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (UnimplementedPortServiceServer) DeletePort(context.Context, *DeletePortRequest) (*PortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePort not implemented")
}
func (UnimplementedPortServiceServer) ClearAll(context.Context, *ClearAllRequest) (*ClearAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAll not implemented")
}
func (UnimplementedPortServiceServer) mustEmbedUnimplementedPortServiceServer() {}

// UnsafePortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServiceServer will
// result in compilation errors.
type UnsafePortServiceServer interface {
	mustEmbedUnimplementedPortServiceServer()
}

func RegisterPortServiceServer(s grpc.ServiceRegistrar, srv PortServiceServer) {
	s.RegisterService(&PortService_ServiceDesc, srv)
}

func _PortService_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_CreatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).CreatePort(ctx, req.(*CreatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_DeletePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).DeletePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_DeletePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).DeletePort(ctx, req.(*DeletePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_ClearAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).ClearAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_ClearAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).ClearAll(ctx, req.(*ClearAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortService_ServiceDesc is the grpc.ServiceDesc for PortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "port.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePort",
			Handler:    _PortService_CreatePort_Handler,
		},
		{
			MethodName: "DeletePort",
			Handler:    _PortService_DeletePort_Handler,
		},
		{
			MethodName: "ClearAll",
			Handler:    _PortService_ClearAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

const (
	VendorManagementService_Init_FullMethodName = "/port.VendorManagementService/Init"
)

// VendorManagementServiceClient is the client API for VendorManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VendorManagementServiceClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*IpPort, error)
}

type vendorManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorManagementServiceClient(cc grpc.ClientConnInterface) VendorManagementServiceClient {
	return &vendorManagementServiceClient{cc}
}

func (c *vendorManagementServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*IpPort, error) {
	out := new(IpPort)
	err := c.cc.Invoke(ctx, VendorManagementService_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorManagementServiceServer is the server API for VendorManagementService service.
// All implementations must embed UnimplementedVendorManagementServiceServer
// for forward compatibility
type VendorManagementServiceServer interface {
	Init(context.Context, *InitRequest) (*IpPort, error)
	mustEmbedUnimplementedVendorManagementServiceServer()
}

// UnimplementedVendorManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVendorManagementServiceServer struct {
}

func (UnimplementedVendorManagementServiceServer) Init(context.Context, *InitRequest) (*IpPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedVendorManagementServiceServer) mustEmbedUnimplementedVendorManagementServiceServer() {
}

// UnsafeVendorManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorManagementServiceServer will
// result in compilation errors.
type UnsafeVendorManagementServiceServer interface {
	mustEmbedUnimplementedVendorManagementServiceServer()
}

func RegisterVendorManagementServiceServer(s grpc.ServiceRegistrar, srv VendorManagementServiceServer) {
	s.RegisterService(&VendorManagementService_ServiceDesc, srv)
}

func _VendorManagementService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorManagementServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorManagementService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorManagementServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VendorManagementService_ServiceDesc is the grpc.ServiceDesc for VendorManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VendorManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "port.VendorManagementService",
	HandlerType: (*VendorManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _VendorManagementService_Init_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
